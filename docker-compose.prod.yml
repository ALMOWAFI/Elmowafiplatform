version: '3.8'

services:
  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: elmowafiplatform-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-elmowafiplatform-production-secret-change-this}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@db:5432/elmowafiplatform}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://your-domain.com}
      - AZURE_AI_ENDPOINT=${AZURE_AI_ENDPOINT:-}
      - AZURE_AI_KEY=${AZURE_AI_KEY:-}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - FILE_UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=10485760
      - RATE_LIMIT_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - api_data:/app/data
      - api_uploads:/app/uploads
      - api_logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - elmowafiplatform-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: elmowafiplatform-db
    environment:
      - POSTGRES_DB=elmowafiplatform
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - elmowafiplatform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d elmowafiplatform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: elmowafiplatform-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - elmowafiplatform-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # React Frontend (for production build)
  frontend:
    build:
      context: ./elmowafy-travels-oasis
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
        - VITE_APP_VERSION=${APP_VERSION:-1.0.0}
    container_name: elmowafiplatform-frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - elmowafiplatform-network
    environment:
      - NODE_ENV=production

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: elmowafiplatform-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - elmowafiplatform-network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: elmowafiplatform-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - elmowafiplatform-network
    profiles:
      - monitoring

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: elmowafiplatform-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - elmowafiplatform-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_data:
    driver: local
  api_uploads:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  elmowafiplatform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 