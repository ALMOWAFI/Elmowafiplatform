name: CI/CD Pipeline - Elmowafy Family Platform

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: elmowafy-platform

jobs:
  # Quality Assurance & Testing
  test-backend:
    name: Backend Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: elmowafy-travels-oasis/server/package-lock.json

    - name: Install backend dependencies
      working-directory: ./elmowafy-travels-oasis/server
      run: npm ci

    - name: Run ESLint
      working-directory: ./elmowafy-travels-oasis/server
      run: npx eslint . --ext .js --format json --output-file eslint-report.json || true

    - name: Run security audit
      working-directory: ./elmowafy-travels-oasis/server
      run: npm audit --audit-level moderate --json > security-audit.json || true

    - name: Run unit tests
      working-directory: ./elmowafy-travels-oasis/server
      env:
        NODE_ENV: test
        DATABASE: mongodb://test:test@localhost:27017/elmowafy-test?authSource=admin
        JWT_SECRET: test-jwt-secret
        REDIS_URL: redis://localhost:6379
      run: npm test -- --coverage --verbose

    - name: Run integration tests
      working-directory: ./elmowafy-travels-oasis/server
      env:
        NODE_ENV: test
        DATABASE: mongodb://test:test@localhost:27017/elmowafy-test?authSource=admin
        JWT_SECRET: test-jwt-secret
        REDIS_URL: redis://localhost:6379
      run: npm run test:integration

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./elmowafy-travels-oasis/server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend Tests & Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: elmowafy-travels-oasis/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./elmowafy-travels-oasis
      run: npm ci

    - name: Run TypeScript checks
      working-directory: ./elmowafy-travels-oasis
      run: npx tsc --noEmit

    - name: Run ESLint
      working-directory: ./elmowafy-travels-oasis
      run: npx eslint src --ext .ts,.tsx --format json --output-file eslint-report.json || true

    - name: Run frontend tests
      working-directory: ./elmowafy-travels-oasis
      run: npm test -- --coverage --watchAll=false

    - name: Build frontend
      working-directory: ./elmowafy-travels-oasis
      run: npm run build

    - name: Run Lighthouse CI
      working-directory: ./elmowafy-travels-oasis
      run: |
        npm install -g @lhci/cli
        lhci autorun

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./elmowafy-travels-oasis/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  test-ai-services:
    name: AI Services Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install AI service dependencies
      working-directory: ./ai-services
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Run code formatting check
      working-directory: ./ai-services
      run: black --check .

    - name: Run linting
      working-directory: ./ai-services
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run type checking
      working-directory: ./ai-services
      run: mypy . --ignore-missing-imports

    - name: Run AI service tests
      working-directory: ./ai-services
      run: pytest --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./ai-services/coverage.xml
        flags: ai-services
        name: ai-services-coverage

  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-ai-services]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Performance Testing
  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run --out json=performance-results.json tests/performance/load-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # Build & Package
  build-and-package:
    name: Build & Package Applications
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-ai-services, security-scan]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    
    environment:
      name: staging
      url: https://staging.elmowafy-platform.com

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here (kubectl, terraform, etc.)

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    
    environment:
      name: production
      url: https://elmowafy-platform.com

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check commands

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Production deployment of Elmowafy Family Platform
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success')

    steps:
    - name: Monitor application health
      run: |
        echo "Monitoring application health for 5 minutes..."
        # Add monitoring commands

    - name: Check error rates
      run: |
        echo "Checking error rates..."
        # Add error rate monitoring

    - name: Performance baseline check
      run: |
        echo "Running performance baseline checks..."
        # Add performance monitoring