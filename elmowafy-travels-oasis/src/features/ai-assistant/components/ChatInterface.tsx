import React, { useState, useRef, useEffect } from 'react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Send } from 'lucide-react';
import { cn } from '@/lib/utils';

interface Message {
  sender: 'user' | 'ai';
  text: string;
}

const ChatInterface: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      sender: 'ai',
      text: 'Hello! I am the Elmowafy Travel Assistant. How can I help you plan your next family adventure today?',
    },
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Auto-scroll to the bottom when new messages are added
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTo({ top: scrollAreaRef.current.scrollHeight, behavior: 'smooth' });
    }
  }, [messages]);

  const handleSendMessage = async () => {
    const trimmedInput = inputValue.trim();
    if (!trimmedInput || isLoading) return;

    const userMessage: Message = { sender: 'user', text: trimmedInput };
    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      // Get auth token from localStorage
      const authToken = localStorage.getItem('authToken');
      
      const response = await fetch('http://localhost:8001/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(authToken && { 'Authorization': `Bearer ${authToken}` }),
        },
        body: JSON.stringify({ 
          message: trimmedInput,
          conversation_id: null, // Will be generated by backend
          family_id: null // TODO: Get from family context
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to get a response from the AI assistant.');
      }

      const data = await response.json();
      const aiMessage: Message = { sender: 'ai', text: data.reply };
      setMessages((prevMessages) => [...prevMessages, aiMessage]);
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage: Message = {
        sender: 'ai',
        text: 'I seem to be having trouble connecting. Please try again in a moment.',
      };
      setMessages((prevMessages) => [...prevMessages, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full h-full flex flex-col bg-white dark:bg-slate-800 rounded-2xl shadow-2xl border border-slate-200 dark:border-slate-700">
      <ScrollArea className="flex-grow p-6" ref={scrollAreaRef}>
        <div className="space-y-6">
          {messages.map((message, index) => (
            <div key={index} className={cn('flex items-start gap-4', message.sender === 'user' ? 'justify-end' : 'justify-start')}>
              {message.sender === 'ai' && (
                <Avatar className="w-10 h-10 border-2 border-slate-300 dark:border-slate-600">
                  <AvatarImage src="/ai-avatar.png" alt="AI Assistant" />
                  <AvatarFallback>AI</AvatarFallback>
                </Avatar>
              )}
              <div className={cn('max-w-md p-4 rounded-2xl', message.sender === 'user' ? 'bg-sky-500 text-white rounded-br-none' : 'bg-slate-100 dark:bg-slate-700 text-slate-800 dark:text-slate-200 rounded-bl-none')}>
                <p className="text-sm">{message.text}</p>
              </div>
              {message.sender === 'user' && (
                <Avatar className="w-10 h-10 border-2 border-slate-300 dark:border-slate-600">
                  <AvatarImage src="/user-avatar.png" alt="User" />
                  <AvatarFallback>U</AvatarFallback>
                </Avatar>
              )}
            </div>
          ))}
        </div>
      </ScrollArea>
      <div className="p-4 bg-white dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700 rounded-b-2xl">
        <div className="relative">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Ask about destinations, activities, or flights..."
            className="pr-14 h-12 rounded-full bg-slate-100 dark:bg-slate-700 border-slate-200 dark:border-slate-600 focus-visible:ring-sky-500"
          />
          <Button
            type="submit"
            size="icon"
            onClick={handleSendMessage}
            className="absolute top-1/2 right-2 -translate-y-1/2 w-9 h-9 rounded-full bg-sky-500 hover:bg-sky-600"
          >
            <Send className="w-5 h-5 text-white" />
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ChatInterface;
